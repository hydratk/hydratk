Test-Scenario-1:
  id: ts_01
  path: tests/hydratk/lib/network/ftp/test_ftp_client.jedi
  name: test_ftp_client
  desc: Unit tests for module hydratk/lib/network/ftp/ftp_client.py
  author: Petr Rasek <bowman@hydratk.org>
  version: 1.0
  
  pre-req: |
    import yodalib.hydratk.lib.network.ftp.ftp_client as ftp    
    import os
    
  Test-Case-1:
    id: tc_01
    name: connect
    desc: Tests for method connect
  
    Test-Condition-1: 
      id: tco_01
      name: min_param_ftp
      desc: Connect with minimum parameters for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        host = 'localhost'
        c._events = []
        res = c.connect(host)
                         
      validate: |  
        expected = [True, host, 21, False, '/']
        current = [res, c._client.host, c._client.port, c._client.secured, c._client.path]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)  
        events = ['ftp_before_connect', 'ftp_before_change_dir', 'ftp_after_connect']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)    
        
    Test-Condition-2: 
      id: tco_02
      name: max_param_ftps
      desc: Connect with maximum parameters for FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        [host, port, user, passw, path] = ['localhost', 222, 'hydra', 'password', '/home/hydra']
        res = c.connect(host, port, user, passw, path)
                         
      validate: |  
        expected = [True, host, port, user, passw, True, path]
        current = [res, c._client.host, c._client.port, c._client.user, c._client.passw, c._client.secured, c._client.path]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)            
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Connect exception
      test: |
        res = c.connect(host, port, user, passw, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception' 
        
  Test-Case-2:
    id: tc_02
    name: disconnect
    desc: Tests for method disconnect
  
    Test-Condition-1: 
      id: tco_01
      name: disconnect_ftp
      desc: Disconnect for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        
    Test-Condition-2: 
      id: tco_02
      name: disconnect_ftps
      desc: Disconnect for FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Disconnect exception
      test: |
        res = c.disconnect(ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'           
        
  Test-Case-3:
    id: tc_03
    name: list_dir
    desc: Tests for method list_dir
  
    Test-Condition-1: 
      id: tco_01
      name: list_dir_ftp
      desc: List directory for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        names = c.list_dir()
                         
      validate: |  
        expected = 4
        current = len(names)
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-2: 
      id: tco_02
      name: list_dir_ftps
      desc: List directory for FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        names = c.list_dir()
                         
      validate: |  
        expected = 4
        current = len(names)
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: List directory exception
      test: |
        names = c.list_dir(ex=True)
                         
      validate: |  
        this.test_result = (names == None)
        assert (this.test_result == True), 'Expected exception'    
        
  Test-Case-4:
    id: tc_04
    name: change_dir
    desc: Tests for method change_dir
  
    Test-Condition-1: 
      id: tco_01
      name: change_dir_ftp
      desc: Change directory for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        path = '/home/hydratk'
        res = c.change_dir(path)
                         
      validate: |  
        expected = [True, path]
        current = [res, c._client.path]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_change_dir']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)            
        
    Test-Condition-2: 
      id: tco_02
      name: change_dir_ftps
      desc: Change directory FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        res = c.change_dir(path)
                         
      validate: |  
        expected = [True, path]
        current = [res, c._client.path]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Change directory exception
      test: |
        res = c.change_dir(path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'    
        
  Test-Case-5:
    id: tc_05
    name: download_file
    desc: Tests for method download_file
  
    Test-Condition-1: 
      id: tco_01
      name: download_ftp
      desc: Download file for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        remote_path = '/home/hydratk/tmp.txt'
        res = c.download_file(remote_path)
                         
      validate: |  
        expected = [True, True]
        current = [res, os.path.exists('tmp.txt')]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_download_file', 'ftp_after_download_file']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)  
        os.remove('tmp.txt')          
        
    Test-Condition-2: 
      id: tco_02
      name: download_ftps
      desc: Download file for FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        local_path = '..'
        res = c.download_file(remote_path, local_path)
                         
      validate: |  
        expected = [True, True]
        current = [res, os.path.exists(local_path+'/tmp.txt')]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)     
        os.remove('../tmp.txt')  
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Download file exception
      test: |
        res = c.download_file(remote_path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'     
        
  Test-Case-6:
    id: tc_06
    name: upload_file
    desc: Tests for method upload_file
  
    Test-Condition-1: 
      id: tco_01
      name: upload
      desc: Upload file for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        local_path = 'tmp.txt'
        with open(local_path, 'w') as f:
            f.write('hydra')
        res = c.upload_file(local_path)        
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_upload_file', 'ftp_after_upload_file']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)           
        os.remove(local_path)
        
    Test-Condition-2: 
      id: tco_02
      name: upload
      desc: Upload file for FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        remote_path = '/home/hydratk'
        with open(local_path, 'w') as f:
            f.write('hydra')
        res = c.upload_file(local_path, remote_path)               
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        os.remove(local_path)  
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Upload file exception
      test: |
        with open(local_path, 'w') as f:
            f.write('hydra')      
        res = c.upload_file(local_path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'   
        os.remove(local_path)          
        
  Test-Case-7:
    id: tc_07
    name: delete_file
    desc: Tests for method delete_file
  
    Test-Condition-1: 
      id: tco_01
      name: delete_file_ftp
      desc: Delte file for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        path = '/home/hydratk/tmp.txt'
        res = c.delete_file(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_delete_file']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)            
        
    Test-Condition-2: 
      id: tco_02
      name: delete_file_ftps
      desc: Delete file FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        res = c.delete_file(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Delete file exception
      test: |
        res = c.delete_file(path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'                        
        
  Test-Case-8:
    id: tc_08
    name: make_dir
    desc: Tests for method make_dir
  
    Test-Condition-1: 
      id: tco_01
      name: make_dir_ftp
      desc: Make directory for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        path = '/home/hydratk/tmp'
        res = c.make_dir(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_make_dir']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)            
        
    Test-Condition-2: 
      id: tco_02
      name: make_dir_ftps
      desc: Make directory FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        res = c.make_dir(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Make directory exception
      test: |
        res = c.make_dir(path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception' 
        
  Test-Case-9:
    id: tc_09
    name: remove_dir
    desc: Tests for method remove_dir
  
    Test-Condition-1: 
      id: tco_01
      name: remove_dir_ftp
      desc: Remove directory for FTP protocol
      test: |
        c = ftp.TestFTPClient(secured=False)
        c._events = []
        path = '/home/hydratk/tmp'
        res = c.remove_dir(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['ftp_before_remove_dir']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)            
        
    Test-Condition-2: 
      id: tco_02
      name: remove_dir_ftps
      desc: Remove directory FTPS protocol
      test: |
        c = ftp.TestFTPClient(secured=True)
        res = c.remove_dir(path)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Remove directory exception
      test: |
        res = c.remove_dir(path, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'                                                                                      