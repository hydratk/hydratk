Test-Scenario-1:
  id: ts_01
  path: tests/hydratk/lib/network/email/test_smtp_client.jedi
  name: test_smtp_client
  desc: Unit tests for module hydratk/lib/network/email/smtp_client.py
  author: Petr Rasek <bowman@hydratk.org>
  version: 1.0
  
  pre-req: |
    import yodalib.hydratk.lib.network.email.smtp_client as email    
    
  Test-Case-1:
    id: tc_01
    name: connect
    desc: Tests for method connect
  
    Test-Condition-1: 
      id: tco_01
      name: min_param_smtp
      desc: Connect with minimum parameters for SMTP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        host = 'localhost'
        c._events = []
        res = c.connect(host)
                         
      validate: |  
        expected = [True, host, 25, False]
        current = [res, c._client.host, c._client.port, c._client.secured]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)  
        events = ['email_before_connect', 'email_after_connect']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)    
        
    Test-Condition-2: 
      id: tco_02
      name: max_param_smtps
      desc: Connect with maximum parameters for SMTPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        [host, port, user, passw] = ['localhost', 465, 'hydra', 'password']
        c._events = []
        res = c.connect(host, port, user, passw)
                         
      validate: |  
        expected = [True, host, port, user, passw, True]
        current = [res, c._client.host, c._client.port, c._client.user, c._client.passw, c._client.secured]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)
        events = ['email_before_connect', 'email_after_connect']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)             
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Connect exception
      test: |
        res = c.connect(host, port, user, passw, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception' 
        
  Test-Case-2:
    id: tc_02
    name: disconnect
    desc: Tests for method disconnect
  
    Test-Condition-1: 
      id: tco_01
      name: disconnect_smtp
      desc: Disconnect for SMTP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        
    Test-Condition-2: 
      id: tco_02
      name: disconnect_smtps
      desc: Disconnect for SMTPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Disconnect exception
      test: |
        res = c.disconnect(ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'           
        
  Test-Case-3:
    id: tc_03
    name: send_email
    desc: Tests for method send_email
  
    Test-Condition-1: 
      id: tco_01
      name: min_params_smtp
      desc: Send email with minimum parameters for SMTP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        [subject, message] = ['hydra', 'Test message']
        res = c.send_email(subject, message)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['email_before_send_email', 'email_after_send_email']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)         
        
    Test-Condition-2: 
      id: tco_02
      name: max_params_smtps
      desc: Send email with maximum parameters for SMTPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        c._events = []
        [subject, message, sender, recipients, cc, bcc] = ['hydra', 'Test message', 'sender', ['recipient1'], 
                                                           ['recipient2'], ['recipient3']]
        res = c.send_email(subject, message, sender, recipients, cc, bcc)
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Send email exception
      test: |
        res = c.send_email(sender, message, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'                                                                    