Test-Scenario-1:
  id: ts_01
  path: tests/hydratk/lib/network/email/test_pop_client.jedi
  name: test_pop_client
  desc: Unit tests for module hydratk/lib/network/email/pop_client.py
  author: Petr Rasek <bowman@hydratk.org>
  version: 1.0
  
  pre-req: |
    import yodalib.hydratk.lib.network.email.pop_client as email    
    
  Test-Case-1:
    id: tc_01
    name: connect
    desc: Tests for method connect
  
    Test-Condition-1: 
      id: tco_01
      name: min_param_pop
      desc: Connect with minimum parameters for POP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        host = 'localhost'
        c._events = []
        res = c.connect(host)
                         
      validate: |  
        expected = [True, host, 110, False]
        current = [res, c._client.host, c._client.port, c._client.secured]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)  
        events = ['email_before_connect', 'email_after_connect']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)  
        
    Test-Condition-2: 
      id: tco_02
      name: max_param_pops
      desc: Connect with maximum parameters for POPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        [host, port, user, passw] = ['localhost', 995, 'hydra', 'admin']
        c._events = []
        res = c.connect(host, port, user, passw)
                         
      validate: |  
        expected = [True, host, port, user, passw, True]
        current = [res, c._client.host, c._client.port, c._client.user, c._client.passw, c._client.secured]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)  
        events = ['email_before_connect', 'email_after_connect']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)   
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Connect exception
      test: |
        res = c.connect(host, port, user, passw, ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'  
        
  Test-Case-2:
    id: tc_02
    name: disconnect
    desc: Tests for method disconnect
  
    Test-Condition-1: 
      id: tco_01
      name: disconnect_pop
      desc: Disconnect for POP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        
    Test-Condition-2: 
      id: tco_02
      name: disconnect_popps
      desc: Disconnect for POPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        res = c.disconnect()
                         
      validate: |  
        expected = True
        current = res
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)        
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Disconnect exception
      test: |
        res = c.disconnect(ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'               
        
  Test-Case-3:
    id: tc_03
    name: email_count
    desc: Tests for method email_count
  
    Test-Condition-1: 
      id: tco_01
      name: email_count_pop
      desc: Email count for POP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        cnt = c.email_count()
                         
      validate: |  
        expected = 10
        current = cnt
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        
    Test-Condition-2: 
      id: tco_02
      name: email_count_pops
      desc: Email count for POPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        cnt = c.email_count()
                         
      validate: |  
        expected = 10
        current = cnt
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)      
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Email count exception
      test: |
        cnt = c.email_count(ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'    
        
  Test-Case-4:
    id: tc_04
    name: list_emails
    desc: Tests for method list_emails
  
    Test-Condition-1: 
      id: tco_01
      name: list_emails_pop
      desc: List emails for POP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        emails = c.list_emails()
                         
      validate: |  
        expected = 3
        current = len(emails)
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        
    Test-Condition-2: 
      id: tco_02
      name: list_emails_pops
      desc: List emails for POPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        emails = c.list_emails()
                         
      validate: |  
        expected = 3
        current = len(emails)
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)      
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: List emails exception
      test: |
        emails = c.list_emails(ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'                
        
  Test-Case-5:
    id: tc_05
    name: receive_email
    desc: Tests for method receive_email
  
    Test-Condition-1: 
      id: tco_01
      name: receive_email_pop
      desc: Receive email for POP protocol
      test: |
        c = email.TestEmailClient(secured=False)
        (sender, recipients, cc, subject, message) = c.receive_email('1')
                         
      validate: |  
        expected = ['hydra@hydratk.org', 2, 2, 'Test email', 24]
        current = [sender, len(recipients), len(cc), subject, len(message)]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current) 
        events = ['email_before_receive_email', 'email_after_receive_email']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)          
        
    Test-Condition-2: 
      id: tco_02
      name: receive_email_pops
      desc: Receive email for POPS protocol
      test: |
        c = email.TestEmailClient(secured=True)
        c._events = []
        (sender, recipients, cc, subject, message) = c.receive_email('1')
                         
      validate: |  
        expected = ['hydra@hydratk.org', 2, 2, 'Test email', 24]
        current = [sender, len(recipients), len(cc), subject, len(message)]
        this.test_result = (current == expected)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(expected, current)  
        events = ['email_before_receive_email', 'email_after_receive_email']
        this.test_result = (c._events == events)
        assert (this.test_result == True), 'Expected: {0}, current: {1}'.format(events, c._events)              
        
    Test-Condition-3: 
      id: tco_03
      name: exception
      desc: Receive email exception
      test: |
        email = c.receive_email('1', ex=True)
                         
      validate: |  
        this.test_result = (res == False)
        assert (this.test_result == True), 'Expected exception'                  