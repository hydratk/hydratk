Test-Scenario-1:
  id: ts_01
  path: tests/hydratk/lib/data/test_randgen.jedi
  name: test_randgen
  desc: Unit tests for module hydratk/lib/data/randgen.py
  author: Petr Rasek <bowman@hydratk.org>
  version: 1.0
  
  pre-req: |
    import hydratk.lib.data.randgen as gen
    
  Test-Case-1:
    id: tc_01
    name: gen_message_id
    desc: Tests for method gen_message_id
  
    Test-Condition-1: 
      id: tco_01
      name: own_prefix
      desc: Generate message with own prefix
      test: |
        prefix = 'yoda'        
        message = gen.gen_message_id(prefix) 
                         
      validate: |  
        this.test_result = (prefix in message)
        assert (this.test_result == True), 'expected {0} in {1}'.format(prefix, message)       
        
    Test-Condition-2: 
      id: tco_02
      name: default_prefix
      desc: Generate message with default prefix
      test: |
        prefix = 'hydratk'        
        message = gen.gen_message_id() 
                         
      validate: |  
        this.test_result = (prefix in message)
        assert (this.test_result == True), 'expected {0} in {1}'.format(prefix, message) 
        
  Test-Case-2:
    id: tc_02
    name: gen_id
    desc: Tests for method gen_id
  
    Test-Condition-1: 
      id: tco_01
      name: 1_digit
      desc: Generate id with 1 digit
      test: |
        i = 1
        id = gen.gen_id(i) 
                         
      validate: |  
        this.test_result = (len(id) == i)
        assert (this.test_result == True), 'expected {0} with {1} digits'.format(id, i)     
  
    Test-Condition-2: 
      id: tco_02
      name: 10_digit
      desc: Generate id with 10 digits
      test: |
        i = 10
        id = gen.gen_id(i) 
                         
      validate: |  
        this.test_result = (len(id) == i)
        assert (this.test_result == True), 'expected {0} with {1} digits'.format(id, i)   
        
    Test-Condition-3: 
      id: tco_03
      name: 100_digit
      desc: Generate id with 100 digits
      test: |
        i = 100
        id = gen.gen_id(i) 
                         
      validate: |  
        this.test_result = (len(id) == i)
        assert (this.test_result == True), 'expected {0} with {1} digits'.format(id, i)                 
        
    Test-Condition-4: 
      id: tco_04
      name: invalid_input
      desc: Generate id with invalid input
      test: |
        i = -1
        try:
          id = gen.gen_id(i) 
          result = False
        except ValueError:
          result = True  
                         
      validate: |  
        this.test_result = result
        assert (this.test_result == True), 'expected ValueError'                                   