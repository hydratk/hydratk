Test-Scenario-1:
  Id: ts_01
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_error
  Desc: Test error method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser, CmdOptParserError
  
  Test-Case-1:
    Id: tc_01
    Name: tc_error
    Desc: Error message
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_error
      Desc: Error message, error is raised
      
      Test: |
        try:
            op = CmdOptParser()
            op.error('test')
            ex = False
        except CmdOptParserError:
            ex = True
      
      Validate: |
        this.test_result = ex
        assert (ex), 'error raises CmdOptParserError'
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_set_default_opt_group
  Desc: Test set_default_opt_group method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser, CmdOptParserUndefined
  
  Test-Case-1:
    Id: tc_01
    Name: tc_default_group
    Desc: Default option group
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_group
      Desc: Set new default option group
      
      Test: |
        op = CmdOptParser()
        group = 'test'
        op._options[group] = {}
        op.set_default_opt_group(group)
      
      Validate: |        
        res = this.test_result = op._opt_group
        assert (res == group), '_opt_group = {0}'.format(group)
        op.set_default_opt_group('default')
        del op._options[group]
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_no_exist_group
      Desc: Set not existing option group, error is raised
      
      Test: |
        try: 
            op.set_default_opt_group(group)
            ex = False
        except CmdOptParserUndefined:
            ex = True
      
      Validate: |     
        this.test_result = ex
        assert (ex), 'set_default_opt_group raises CmdOptParserUndefined'   
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_group
      Desc: Set invalid option group, error is raised
      
      Test: |
        try: 
            op.set_default_opt_group(None)
            ex = False
        except TypeError:
            ex = True
      
      Validate: |     
        this.test_result = ex
        assert (ex), 'set_default_opt_group raises TypeError'   
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_add_opt_group
  Desc: Test add_opt_group method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser
  
  Test-Case-1:
    Id: tc_01
    Name: tc_add_group
    Desc: Add option group
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_group
      Desc: Add new group
      
      Test: |
        op = CmdOptParser()
        group = 'test'
        op.add_opt_group(group)
        res = op._options[group]
      
      Validate: |            
        this.test_result = str(res)
        assert (res == {}), '_options[{0}] = {}'.format(group)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_exist_group
      Desc: Add exist group, won't be overidden
      
      Test: |
        op._options[group] = 'xx'
        op.add_opt_group(group)
        res = op._options[group]
      
      Validate: |            
        this.test_result = str(res)
        assert (res == 'xx'), '_options[{0}] = xx'.format(group) 
        del op._options[group] 
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_group
      Desc: Add invalid group, error is raised
      
      Test: |
        try:
            op.add_opt_group(None)
            ex = False
        except TypeError:
            ex = True 
      
      Validate: |              
        this.test_result = ex
        assert (ex), 'add_opt_group raises TypeError'
        
Test-Scenario-4:
  Id: ts_04
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_add_opt
  Desc: Test _add_opt method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser, CmdOptParserError
  
  Test-Case-1:
    Id: tc_01
    Name: tc_single_opt
    Desc: Add single option 
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_group
      Desc: Add new group  
      
      Test: |
        op = CmdOptParser()
        group, opt = 'test', '-x'
        res = op._add_opt(opt, opt_group=group)
      
      Validate: |     
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {'action': 'store_true'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)
        del op._options[group][opt]    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_opt_single_val
      Desc: Add new option with single value
      
      Test: |
        d_opt, has_value, allow_multiple = 'x', True, False
        res = op._add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {'dest': d_opt, 'action': 'store'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)
        del op._options[group][opt]      
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_opt_mult_val
      Desc: Add new option with multiple values
      
      Test: |
        allow_multiple = True
        res = op._add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {'dest': d_opt, 'action': 'append'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_exist_opt
      Desc: Add existing option, error is raised
      
      Test: |
        try:
            op._add_opt(opt, opt_group=group)
            ex = False
        except CmdOptParserError:
            ex = True
      
      Validate: |     
        this.test_result = ex
        assert (ex), '_add_opt raises CmdOptParserError'      
        del op._options[group] 
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_opt
      Desc: Add invalid option, error is raised
      
      Test: |
        try:
            op._add_opt(None)
            ex = False
        except TypeError:
            ex = True
      
      Validate: |     
        this.test_result = ex
        assert (ex), '_add_opt raises TypeError'    
        
  Test-Case-2:
    Id: tc_02
    Name: tc_mult_opt
    Desc: Add multiple options 
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_group
      Desc: Add new group
      
      Test: |
        op = CmdOptParser()
        group = 'test'
        options = ['x', 'y']
        opt = [{'option': options[0], 'action': 'store_true'}, {'option': options[1], 'action': 'store_true'}]        
        res = op._add_opt(opt, opt_group=group)
      
      Validate: |                            
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {options[0]: {'action': opt[0]['action']}, options[1]: {'action': opt[1]['action']}}
        res = op._options[group]
        this.test_result = str(res)
        assert (res == exp), '_options = {0}'.format(exp)
        op._options[group] = {}
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_opt_single_val
      Desc: Add new options with single value
      
      Test: |
        opt[0] = {'option': options[0], 'dest': 'x', 'action': 'store'}
        opt[1] = {'option': options[1], 'dest': 'y', 'action': 'store'}
        res = op._add_opt(opt, opt_group=group)
      
      Validate: |        
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {options[0]: {'action': opt[0]['action'], 'dest': opt[0]['dest']}, 
               options[1]: {'action': opt[1]['action'], 'dest': opt[1]['dest']}}
        res = op._options[group]
        this.test_result = str(res)
        assert (res == exp), '_options = {0}'.format(exp)
        op._options[group] = {}     
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_opt_mult_val
      Desc: Add new options with multiple value
      
      Test: |
        opt[0] = {'option': options[0], 'dest': 'x', 'action': 'append'}
        opt[1] = {'option': options[1], 'dest': 'y', 'action': 'append'}
        res = op._add_opt(opt, opt_group=group)
      
      Validate: |        
        this.test_result = res
        assert (res), '_add_opt = True'
        exp = {options[0]: {'action': opt[0]['action'], 'dest': opt[0]['dest']}, 
               options[1]: {'action': opt[1]['action'], 'dest': opt[1]['dest']}}
        res = op._options[group]
        this.test_result = str(res)
        assert (res == exp), '_options = {0}'.format(exp)
        del op._options[group]         
        
Test-Scenario-5:
  Id: ts_05
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_add_opt
  Desc: Test add_opt method
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser
  
  Test-Case-1:
    Id: tc_01
    Name: tc_single_opt
    Desc: Add single option 
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_group
      Desc: Add new group  
      
      Test: |
        op = CmdOptParser()
        group, opt = 'test', '-x'
        res = op.add_opt(opt, opt_group=group)
      
      Validate: |     
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'action': 'store_true'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)
        del op._options[group][opt]    
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_opt_single_val
      Desc: Add new option with single value
      
      Test: |
        d_opt, has_value, allow_multiple = 'x', True, False
        res = op.add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'dest': d_opt, 'action': 'store'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)
        del op._options[group][opt]      
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_opt_mult_val
      Desc: Add new option with multiple values
      
      Test: |
        allow_multiple = True
        res = op.add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'dest': d_opt, 'action': 'append'}
        res = op._options[group][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group, opt, exp)   
        del op._options[group]
        
  Test-Case-2:
    Id: tc_02
    Name: tc_mult_opt
    Desc: Add multiple options 
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_new_groups
      Desc: Add new groups              
      
      Test: |
        op = CmdOptParser()
        group, opt = ['test', 'test2'], '-x'
        res = op.add_opt(opt, opt_group=group)
      
      Validate: |
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'action': 'store_true'}
        res = op._options[group[0]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[0], opt, exp)
        res = op._options[group[1]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[1], opt, exp)        
        del op._options[group[0]][opt]   
        del op._options[group[1]][opt]   
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_opt_single_val
      Desc: Add new options with single value
      
      Test: |
        d_opt, has_value, allow_multiple = 'x', True, False
        res = op.add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'dest': d_opt, 'action': 'store'}
        res = op._options[group[0]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[0], opt, exp)
        res = op._options[group[1]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[1], opt, exp)        
        del op._options[group[0]][opt] 
        del op._options[group[1]][opt]      
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_opt_mult_val
      Desc: Add new options with multiple values
      
      Test: |
        allow_multiple = True
        res = op.add_opt(opt, d_opt, has_value, allow_multiple, group)
      
      Validate: |     
        this.test_result = res
        assert (res), 'add_opt = True'
        exp = {'dest': d_opt, 'action': 'append'}
        res = op._options[group[0]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[0], opt, exp)  
        res = op._options[group[1]][opt]
        this.test_result = str(res)
        assert (res == exp), '_options[{0}][{1}] = {2}'.format(group[1], opt, exp)           
        del op._options[group[0]]  
        del op._options[group[1]]  
        
Test-Scenario-6:
  Id: ts_06
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_strip_opts
  Desc: Test method _strip_opt
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser
  
  Test-Case-1:
    Id: tc_01
    Name: tc_strip_opts
    Desc: Strip options 
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_no_strip
      Desc: Options not stripped                          
      
      Test: |
        op = CmdOptParser()
        opts = {'a': 1, 'b': 2}
        res = op._strip_opts(opts)
              
      Validate: |
        this.test_result = str(res)
        assert (res == opts), '_strip_opts = {0}'.format(opts)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_strip
      Desc: Options stripped
      
      Test: |
        opts2 = {'a': 1, 'b': 2, 'c': False, 'd': None}
        res = op._strip_opts(opts2)
              
      Validate: |
        this.test_result = str(res)
        assert (res == opts), '_strip_opts = {0}'.format(opts) 
        
Test-Scenario-7:
  Id: ts_07
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_opt_defined
  Desc: Test method opt_defined
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser
  
  Test-Case-1:
    Id: tc_01
    Name: tc_opt_defined
    Desc: Is option defined
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_defined
      Desc: Option defined                          
      
      Test: |
        op = CmdOptParser()              
        op._set_opts['a'] = 'b'
        res = op.opt_defined('a')
        
      Validate: |
        this.test_result = res
        assert (res), 'opt_defined = True'
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_notdefined
      Desc: Option not defined                          
      
      Test: |
        op = CmdOptParser()              
        del op._set_opts['a']
        res = op.opt_defined('a')
        
      Validate: |
        this.test_result = res
        assert (not res), 'opt_defined = False'     
        
Test-Scenario-8:
  Id: ts_08
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_get_opt
  Desc: Test method get_opt
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser
  
  Test-Case-1:
    Id: tc_01
    Name: tc_opt_defined
    Desc: Is option defined
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_defined
      Desc: Option defined                          
      
      Test: |
        op = CmdOptParser()              
        op._set_opts['a'] = True
        res = op.get_opt('a')
        
      Validate: |
        this.test_result = res
        assert (res), 'get_opt = True'        
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_not_defined
      Desc: Option not defined                          
      
      Test: |
        del op._set_opts['a']
        res = op.get_opt('a')
        
      Validate: |
        this.test_result = res
        assert (not res), 'get_opt = False'  
        
Test-Scenario-9:
  Id: ts_09
  Path: hydratk/lib/console/cmdoptparser/01_methods_ut.jedi
  Name: ts_parse
  Desc: Test method parse
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.lib.console.cmdoptparser import CmdOptParser, CmdOptParserUndefined
    import sys
  
  Test-Case-1:
    Id: tc_01
    Name: tc_parse
    Desc: Parse options
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_reg_val
      Desc: Registered option with value
      
      Test: |
        op = CmdOptParser()
        sys.argv.insert(-1, '-l')
        sys.argv.insert(-1, 'en')
        reg, unreg = op.parse()
      
      Validate: |       
        this.test_result = str(reg)
        assert (reg['language'] == 'en'), 'reg[language] = en' 
        del sys.argv[-3:-1]
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_reg_no_val
      Desc: Registered option without value   
      
      Test: |
        op = CmdOptParser()
        sys.argv.insert(-1, '-f')
        reg, unreg = op.parse(hide_undef=False)
      
      Validate: | 
        this.test_result = str(reg)
        assert (reg['force']), 'reg[force] = True' 
        del sys.argv[-2]
        res = op._set_opts
        this.test_result = str(res)
        assert ('interactive' in res), '_set_opts contains interactive'    
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_not_reg
      Desc: Not registered option
      
      Test: |
        op = CmdOptParser()
        sys.argv.insert(-1, '-x')
        reg, unreg = op.parse()        
      
      Validate: | 
        this.test_result = str(unreg)
        assert ('-x' in unreg), 'unreg contains -x' 
        del sys.argv[-2]    
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_hide_undef
      Desc: Hide undefined options   
      
      Test: |
        op = CmdOptParser()
        sys.argv.insert(-1, '-f')
        reg, unreg = op.parse(hide_undef=True)
      
      Validate: | 
        this.test_result = str(reg)
        assert (reg['force']), 'reg[force] = True' 
        del sys.argv[-2] 
        res = op._set_opts
        this.test_result = str(res)
        assert ('interactive' not in res), '_set_opts does not contain interactive'                   
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_invalid_group
      Desc: Invalid option group
      
      Test: |
        try:
            op.parse('xx')
            ex = False
        except CmdOptParserUndefined:
            ex = True
      
      Validate: |  
        this.test_result = ex
        assert (ex), 'parse raises CmdOptParserUndefined'                      