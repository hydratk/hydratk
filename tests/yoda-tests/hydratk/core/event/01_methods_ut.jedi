Test-Scenario-1:
  Id: ts_01
  Path: hydratk/core/event/01_methods_ut.jedi
  Name: ts_init
  Desc: Test method __init__
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.event import Event
  
  Test-Case-1:
    Id: tc_01
    Name: tc_init
    Desc: Initialize event
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_no_data
      Desc: Event without data
      
      Test: |
        id = 'test'
        event = Event(id)
      
      Validate: |
        res = this.test_result = event._id
        assert (res == id), '_id = {0}'.format(id)
        exp_data = {'source_event': None, 'target_event': None}
        res = (event._args, event._data)
        this.test_result = str(res)
        assert (res == ((), exp_data)), '_args = (), _data = {0}'.format(exp_data)
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_data
      Desc: Event with data
      
      Test: |
        id, args, kwargs = 'test', ['arg'], {'data': 'test'}
        event = Event(id, *args, **kwargs)
      
      Validate: |
        res = this.test_result = event._id
        assert (res == id), '_id = {0}'.format(id)        
        exp_args = ('arg',)
        exp_data = {'source_event': None, 'target_event': None, 'data': 'test'}
        res = (event._args, event._data)
        this.test_result = str(res)
        assert (res == (exp_args, exp_data)), '_args = {0}, _data = {1}'.format(exp_args, exp_data)  
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_invalid_event
      Desc: Event with invalid id, error is raised
      
      Test: |
        try:
            event = Event('')
            ex = False
        except ValueError:
            ex = True
      
      Validate: |
        this.test_result = ex
        assert (res), '__init__ raises ValueError'  
        
Test-Scenario-2:
  Id: ts_02
  Path: hydratk/core/event/01_methods_ut.jedi
  Name: ts_simple_methods
  Desc: Test simple methods
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.event import Event
  
  Test-Case-1:
    Id: tc_01
    Name: tc_methods
    Desc: Simple event methods
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_id
      Desc: Method id
      
      Test: |
        id, args, kwargs = 'test', ['arg1', 'arg2'], {'data1': 1, 'data2': 2}
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = this.test_result = event.id()
        exp = id
        assert (res == exp), 'id = {0}'.format(exp)  
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_argc
      Desc: Method argc
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = this.test_result = event.argc()
        exp = len(args)
        assert (res == exp), 'argc = {0}'.format(exp)      
        
    Test-Condition-3: 
      Id: tco_03
      Name: tco_args
      Desc: Method args
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = event.args()
        this.test_result = str(res)
        exp = ('arg1', 'arg2', )
        assert (res == exp), 'args = {0}'.format(exp)      
        
    Test-Condition-4: 
      Id: tco_04
      Name: tco_get_all_data
      Desc: Method get_all_data
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = event.get_all_data()
        this.test_result = str(res)
        exp = {'data1': 1, 'data2': 2, 'source_event': None, 'target_event': None}
        assert (res == exp), 'get_all_data = {0}'.format(exp)   
        
    Test-Condition-5: 
      Id: tco_05
      Name: tco_get_data
      Desc: Method get_data
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = this.test_result = event.get_data('data1')
        exp = kwargs['data1']
        assert (res == exp), 'get_data = {0}'.format(exp)    
        
    Test-Condition-6: 
      Id: tco_06
      Name: tco_get_data_invalid
      Desc: Method get_data, invalid key
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |
        res = this.test_result = event.get_data('data3')
        assert (res == None), 'get_data = None'
        
    Test-Condition-7: 
      Id: tco_07
      Name: tco_set_data
      Desc: Method set_data
      
      Test: |
        event = Event(id, *args, **kwargs)
        event.set_data('data3', 3)
      
      Validate: |   
        res = this.test_result = event.get_data('data3')
        exp = 3
        assert (res == exp), 'get_data = {0}'.format(exp)  
        
    Test-Condition-8: 
      Id: tco_08
      Name: tco_set_data_invalid
      Desc: Method set_data, invalid key
      
      Test: |
        try:
            event = Event(id, *args, **kwargs)
            event.set_data('', 3)
            ex = False
        except ValueError:
            ex = True 
       
      Validate: |   
        this.test_result = ex
        assert (ex), 'set_data raises ValueError'  
        
    Test-Condition-9: 
      Id: tco_09
      Name: tco_argv
      Desc: Method argv
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = this.test_result = event.argv(1)
        exp = args[1]
        assert (res == exp), 'argv = {0}'.format(exp)  
        
    Test-Condition-10: 
      Id: tco_11
      Name: tco_argv_invalid
      Desc: Method argv, invalid index
      
      Test: |
        event = Event(id, *args, **kwargs)
      
      Validate: |   
        res = this.test_result = event.argv(3)
        assert (res == None), 'argv = None'        
        
    Test-Condition-11: 
      Id: tco_11
      Name: tco_set_argv
      Desc: Method set_argv
      
      Test: |
        event = Event(id, *args, **kwargs)
        event.set_argv(1, 3)
      
      Validate: |   
        res = this.test_result = event.argv(1)
        exp = 3
        assert (res == exp), 'argv = {0}'.format(exp)  
        
    Test-Condition-12: 
      Id: tco_12
      Name: tco_set_argv_invalid
      Desc: Method set_argv, invalid index
      
      Test: |
        event = Event(id, *args, **kwargs)
        event.set_argv(3, 3)
      
      Validate: |   
        res = this.test_result = event.argc()
        exp = 2
        assert (res == exp), 'argc = {0}'.format(exp)     
        
    Test-Condition-13: 
      Id: tco_13
      Name: tco_stop_propagation
      Desc: Method stop_propagation
      
      Test: |
        event = Event(id, *args, **kwargs)
        event._propagate = True
        event.stop_propagation()
      
      Validate: |   
        res = this.test_result = event._propagate        
        assert (not res), '_propagate = False'     
        
    Test-Condition-14: 
      Id: tco_14
      Name: tco_prevent_default
      Desc: Method prevent_default
      
      Test: |
        event = Event(id, *args, **kwargs)
        event._run_default = True
        event.prevent_default()
      
      Validate: |   
        res = this.test_result = event._run_default        
        assert (not res), '_run_default = False'        
        
    Test-Condition-15: 
      Id: tco_15
      Name: tco_run_default
      Desc: Method run_default
      
      Test: |
        event = Event(id, *args, **kwargs)
        event._run_default = False
        event.run_default()
      
      Validate: |   
        res = this.test_result = event._run_default        
        assert (res), '_run_default = True'             
        
    Test-Condition-16: 
      Id: tco_16
      Name: tco_will_run_default
      Desc: Method will_run_default
      
      Test: |
        event = Event(id, *args, **kwargs)
        event._run_default = True
      
      Validate: |   
        res = this.test_result = event.will_run_default()      
        assert (res), '_run_default = True'  
        
    Test-Condition-17: 
      Id: tco_17
      Name: tco_propagate
      Desc: Method propagate
      
      Test: |
        event = Event(id, *args, **kwargs)
        event._propagate = True
      
      Validate: |   
        res = this.test_result = event.propagate()      
        assert (res), '_propagate = True' 
        
Test-Scenario-3:
  Id: ts_03
  Path: hydratk/core/event/01_methods_ut.jedi
  Name: ts_props
  Desc: Test properties
  Author: Petr Rasek <bowman@hydratk.org>
  Version: 0.1
  
  Pre-Req: |
    from hydratk.core.event import Event
  
  Test-Case-1:
    Id: tc_01
    Name: tc_props
    Desc: Event properties
    
    Test-Condition-1: 
      Id: tco_01
      Name: tco_skip_before_hook
      Desc: Getter skip_before_hook
      
      Test: |
        id, args, kwargs = 'test', ['arg1', 'arg2'], {'data1': 1, 'data2': 2}
        event = Event(id, *args, **kwargs) 
        event._skip_before_hook = True
        
      Validate: |
        res = this.test_result = event.skip_before_hook
        assert (res), 'skip_before_hook = True'     
        
    Test-Condition-2: 
      Id: tco_02
      Name: tco_skip_after_hook
      Desc: Getter skip_after_hook
      
      Test: |
        event = Event(id, *args, **kwargs) 
        event._skip_after_hook = True
        
      Validate: |
        res = this.test_result = event.skip_after_hook
        assert (res), 'skip_after_hook = True'                                                                                                      